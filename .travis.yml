#           Copyright Matthew Pulver 2018 - 2019.
# Distributed under the Boost Software License, Version 1.0.
#      (See accompanying file LICENSE_1_0.txt or copy at
#           https://www.boost.org/LICENSE_1_0.txt)

language: cpp
env:
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "LIUpAUiiEH2CUllB+wBdtUHwYMnO6YhxJMK9H/CwM3TCaKHfSFajudeU4+GSWXB1h3qQjhawaNBmhAh6vq39BrJUXADKk9tlvzmdR3lyHAFx7jPnjrE5ca1ENSCGCWDZb3VAO50caChrb7HZ6Wb26aoYnMZnUDt6jQ5TzhMaqQJm/Fh1PEH4AiaoBTnXZper+zlI4GvZYtinfDSRbVOkCEiQ625Ir0Xqy8vYaVna4IESGB4Pft/8SpKWhofdk8rHIGXUIGqRM8oK2LvFzwDNf5u7RSoJraEqZ8W2zcWHh8ijn7N7Sj/Sh37bYeBbWu0asev0OjoZhsQVjpDGdyudSFbAuqGnCIgy/gP3+cWe8IRgTTOUDoYlyFjCSZr7Tfum7Ow1hBN6+EQ3Q4CwX04NyvOEysJ6FyyVX8pfMzqA7dm8W+JKeiIMD696Un8Xdj3578HqAiqDOeqeKJ7pNkGVIVr92DbwodKl8CMDV0Mqame6kJmaRmKftrP7a5xciiBvzzE9ay6Oc0Xc2JvdIbbwFwvAGXfF9/4qVcwwN66zYM6YBKaPP7C/Ule0//erg+YsHxu4YftOF2KRHg0odSZ7TKpdApbbbhOmVV4NRq3I4NgWVfPY0ecmUfRG1hmhHi1opaSfBzBVAFmz4tcQHQqr7NOaJ6XxO1l4aFlcv0Nkq24="

anchors:
  clang-38: &clang-38 { apt: { packages: [ "clang-3.8",
                                           "libstdc++-6-dev" ], sources: [ "llvm-toolchain-trusty-3.8",
                                                                           "ubuntu-toolchain-r-test"   ] }, sonarcloud: { organization: kedarbhat-github } }
  clang-4:  &clang-4  { apt: { packages: [ "clang-4.0",
                                           "libstdc++-6-dev" ], sources: [ "llvm-toolchain-trusty-4.0",
                                                                           "ubuntu-toolchain-r-test"   ] }, sonarcloud: { organization: kedarbhat-github } }
  clang-5:  &clang-5  { apt: { packages: [ "clang-5.0",
                                           "libstdc++-7-dev" ], sources: [ "llvm-toolchain-trusty-5.0",
                                                                           "ubuntu-toolchain-r-test"   ] }, sonarcloud: { organization: kedarbhat-github } }
  clang-6:  &clang-6  { apt: { packages: [ "clang-6.0",
                                           "libc++-dev",
                                           "libstdc++-8-dev" ], sources: [ "llvm-toolchain-trusty-6.0",
                                                                           "ubuntu-toolchain-r-test"   ] }, sonarcloud: { organization: kedarbhat-github } }
  gcc-6:    &gcc-6    { apt: { packages: [ "g++-6"           ], sources: [ "ubuntu-toolchain-r-test"   ] }, sonarcloud: { organization: kedarbhat-github } }
  gcc-7:    &gcc-7    { apt: { packages: [ "g++-7"           ], sources: [ "ubuntu-toolchain-r-test"   ] }, sonarcloud: { organization: kedarbhat-github } }
  gcc-8:    &gcc-8    { apt: { packages: [ "g++-8"           ], sources: [ "ubuntu-toolchain-r-test"   ] }, sonarcloud: { organization: kedarbhat-github }, coverity_scan: { project: { name: "kedarbhat/autodiff", description: "Boost.Autodiff" }, notification_email: "$COVERITY_SCAN_NOTIFICATION_EMAIL", branch_pattern: develop }}

jobs:
  allow_failures:
    - env:
        - COPY="all the environment settings from your job"

  include:
    # libstdc++
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-6 && CXX=g++-6 && COMPILER=g++-6 && CXXSTD=c++11"                                            ], addons: *gcc-6    }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-6 && CXX=g++-6 && COMPILER=g++-6 && CXXSTD=c++14"                                            ], addons: *gcc-6    }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-7 && CXX=g++-7 && COMPILER=g++-7 && CXXSTD=c++11"                                            ], addons: *gcc-7    }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-7 && CXX=g++-7 && COMPILER=g++-7 && CXXSTD=c++14"                                            ], addons: *gcc-7    }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-7 && CXX=g++-7 && COMPILER=g++-7 && CXXSTD=c++17"                                            ], addons: *gcc-7    }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-8 && CXX=g++-8 && COMPILER=g++-8 && CXXSTD=c++11"                                            ], addons: *gcc-8    }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-8 && CXX=g++-8 && COMPILER=g++-8 && CXXSTD=c++14"                                            ], addons: *gcc-8    }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-8 && CXX=g++-8 && COMPILER=g++-8 && CXXSTD=c++17"                                            ], addons: *gcc-8    }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-8 && CXX=g++-8 && COMPILER=g++-8 && CXXSTD=c++2a"                                            ], addons: *gcc-8    }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-3.8 && CXX=clang++-3.8 && COMPILER=clang++-3.8 && CXXSTD=c++11"                            ], addons: *clang-38 }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-3.8 && CXX=clang++-3.8 && COMPILER=clang++-3.8 && CXXSTD=c++14"                            ], addons: *clang-38 }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-4.0 && CXX=clang++-4.0 && COMPILER=clang++-4.0 && CXXSTD=c++11"                            ], addons: *clang-4  }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-4.0 && CXX=clang++-4.0 && COMPILER=clang++-4.0 && CXXSTD=c++14"                            ], addons: *clang-4  }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-5.0 && CXX=clang++-5.0 && COMPILER=clang++-5.0 && CXXSTD=c++11"                            ], addons: *clang-5  }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-5.0 && CXX=clang++-5.0 && COMPILER=clang++-5.0 && CXXSTD=c++14"                            ], addons: *clang-5  }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-5.0 && CXX=clang++-5.0 && COMPILER=clang++-5.0 && CXXSTD=c++17"                            ], addons: *clang-5  }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-6.0 && CXX=clang++-6.0 && COMPILER=clang++-6.0 && CXXSTD=c++11"                            ], addons: *clang-6  }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-6.0 && CXX=clang++-6.0 && COMPILER=clang++-6.0 && CXXSTD=c++14"                            ], addons: *clang-6  }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-6.0 && CXX=clang++-6.0 && COMPILER=clang++-6.0 && CXXSTD=c++17"                            ], addons: *clang-6  }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-6.0 && CXX=clang++-6.0 && COMPILER=clang++-6.0 && CXXSTD=c++2a"                            ], addons: *clang-6  }

    # libc++
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-6.0 && CXX=clang++-6.0 && COMPILER=clang++-6.0 && CXXSTD=c++11 && CXXFLAGS=-stdlib=libc++" ], addons: *clang-6   }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-6.0 && CXX=clang++-6.0 && COMPILER=clang++-6.0 && CXXSTD=c++14 && CXXFLAGS=-stdlib=libc++" ], addons: *clang-6   }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-6.0 && CXX=clang++-6.0 && COMPILER=clang++-6.0 && CXXSTD=c++17 && CXXFLAGS=-stdlib=libc++" ], addons: *clang-6   }
    - { os: "linux", compiler: "clang", env: [ MATRIX_EVAL: "CC=clang-6.0 && CXX=clang++-6.0 && COMPILER=clang++-6.0 && CXXSTD=c++2a && CXXFLAGS=-stdlib=libc++" ], addons: *clang-6   }

    # osx
    - { os: "osx", env: [ MATRIX_EVAL: "COMPILER=clang++ && CXXSTD=c++11" ], osx_image: "xcode9.3" }
    - { os: "osx", env: [ MATRIX_EVAL: "COMPILER=clang++ && CXXSTD=c++14" ], osx_image: "xcode9.3" }
    - { os: "osx", env: [ MATRIX_EVAL: "COMPILER=clang++ && CXXSTD=c++17" ], osx_image: "xcode9.3" }

    # SonarCloud, CodeCov (Latest GCC)
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-8 && CXX=g++-8 && COMPILER=g++-8 && CXXSTD=c++11 && CODE_ANALYSIS=1"  ], addons: *gcc-8 }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-8 && CXX=g++-8 && COMPILER=g++-8 && CXXSTD=c++14 && CODE_ANALYSIS=1"  ], addons: *gcc-8 }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-8 && CXX=g++-8 && COMPILER=g++-8 && CXXSTD=c++17 && CODE_ANALYSIS=1"  ], addons: *gcc-8 }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-8 && CXX=g++-8 && COMPILER=g++-8 && CXXSTD=c++2a && CODE_ANALYSIS=1"  ], addons: *gcc-8 }
    - { os: "linux", compiler: "gcc",   env: [ MATRIX_EVAL: "CC=gcc-8 && CXX=g++-8 && COMPILER=g++-8 && CXXSTD=c++11 && TOOLSET=gcc-8 && COMMENT='Coverity Scan'"], addons: *gcc-8 }
before_install:
  - if [ \! -d $HOME/cache3/boost_1_69_0 ]; then curl -L -s -S https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz | tar xz -C $HOME/cache3 -f -; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then brew update && brew install gcc; fi
  - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
  - eval "${MATRIX_EVAL}"

script:
  - ls
  - $COMPILER --version
  - if [ -z "${CODE_ANALYSIS}" ]; then $COMPILER test/test_autodiff1.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff1; fi
  - if [ -z "${CODE_ANALYSIS}" ]; then $COMPILER test/test_autodiff2.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff2; fi
  - if [ -z "${CODE_ANALYSIS}" ]; then $COMPILER test/test_autodiff3.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff3; fi
  - if [ -z "${CODE_ANALYSIS}" ]; then $COMPILER test/test_autodiff4.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff4; fi
  - if [ -z "${CODE_ANALYSIS}" ]; then $COMPILER test/test_autodiff5.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff5; fi
  - if [ -z "${CODE_ANALYSIS}" ]; then $COMPILER test/test_autodiff6.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff6; fi
  - if $(env | grep -q ^CODE_ANALYSIS=); then build-wrapper-linux-x86-64 --out-dir bw-outputs $COMPILER test/test_autodiff1.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff1 ; fi
  - ./test_autodiff1
  - if $(env | grep -q ^CODE_ANALYSIS=); then build-wrapper-linux-x86-64 --out-dir bw-outputs $COMPILER test/test_autodiff2.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff2 ; fi
  - ./test_autodiff2
  - if $(env | grep -q ^CODE_ANALYSIS=); then build-wrapper-linux-x86-64 --out-dir bw-outputs $COMPILER test/test_autodiff3.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff3 ; fi
  - ./test_autodiff3
  - if $(env | grep -q ^CODE_ANALYSIS=); then build-wrapper-linux-x86-64 --out-dir bw-outputs $COMPILER test/test_autodiff4.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff4 ; fi
  - ./test_autodiff4
  - if $(env | grep -q ^CODE_ANALYSIS=); then build-wrapper-linux-x86-64 --out-dir bw-outputs $COMPILER test/test_autodiff5.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff5 ; fi
  - ./test_autodiff5
  - if $(env | grep -q ^CODE_ANALYSIS=); then build-wrapper-linux-x86-64 --out-dir bw-outputs $COMPILER test/test_autodiff6.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -o test_autodiff6 ; fi
  - ./test_autodiff6
  - if $(env | grep -q ^CODE_ANALYSIS=); then sonar-scanner; fi

after_success:
  - if $(env | grep -q ^CODE_ANALYSIS=); then if pyenv shell 3.6.3; then pip3 install --user codecov; fi; fi
  - if $(env | grep -q ^CODE_ANALYSIS=); then if $COMPILER test/test_autodiff1.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -O0 --coverage -o test_autodiff; then ./test_autodiff1; fi; fi
  - if $(env | grep -q ^CODE_ANALYSIS=); then if $COMPILER test/test_autodiff2.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -O0 --coverage -o test_autodiff; then ./test_autodiff2; fi; fi
  - if $(env | grep -q ^CODE_ANALYSIS=); then if $COMPILER test/test_autodiff3.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -O0 --coverage -o test_autodiff; then ./test_autodiff3; fi; fi
  - if $(env | grep -q ^CODE_ANALYSIS=); then if $COMPILER test/test_autodiff4.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -O0 --coverage -o test_autodiff; then ./test_autodiff4; fi; fi
  - if $(env | grep -q ^CODE_ANALYSIS=); then if $COMPILER test/test_autodiff5.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -O0 --coverage -o test_autodiff; then ./test_autodiff5; fi; fi
  - if $(env | grep -q ^CODE_ANALYSIS=); then if $COMPILER test/test_autodiff6.cpp -std=$CXXSTD -I$HOME/cache3/boost_1_69_0 -Iinclude -Wall -O0 --coverage -o test_autodiff; then ./test_autodiff6; fi; fi
  - if $(env | grep -q ^CODE_ANALYSIS=); then bash <(curl -s https://codecov.io/bash) -X coveragepy -x gcov-7 -a --relative-only; fi


