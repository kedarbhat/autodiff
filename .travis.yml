# Copyright 2016 Peter Dimov
# Copyright 2017, 2018 James E. King III
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://boost.org/LICENSE_1_0.txt)

#
# Generic Travis CI build script for boostorg repositories
# See: https://github.com/boostorg/boost-ci
#
# Instructions for customizing this script for your library:
#
# 1. Customize the compilers and language levels you want in the 'jobs'.
# 2. If you have more than include/, src/, test/, example/, examples/, or
#    tools/ directories, modify your Travis CI project and add the environment
#    variable DEPINST.  For example if your build uses code in "bench/" and
#    "fog/" directories, then set DEPINST to the following:
#        --include bench --include fog
# 3. If you want to enable Coverity Scan, you need to provide the environment
#    variables COVERITY_SCAN_TOKEN and COVERITY_SCAN_NOTIFICATION_EMAIL in
#    your github settings.
# 4. Enable pull request builds in your boostorg/<library> account.
#
# That's it - the scripts will do everything else for you.

language: cpp

env:
  global:
    # see: http://www.boost.org/build/doc/html/bbv2/overview/invocation.html#bbv2.overview.invocation.properties
    # to use the default for a given environment, comment it out; recommend you build debug and release however..
    # - B2_ADDRESS_MODEL=address-model=64,32
    # - B2_LINK=link=shared,static
    # - B2_THREADING=threading=multi,single
    - B2_VARIANT=variant=release,debug

before_install:
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then brew update && brew install gcc; fi

install:
  - git clone https://github.com/boostorg/boost-ci.git boost-ci
  - cp -pr boost-ci/ci .
  - export SELF=`basename $TRAVIS_BUILD_DIR`
  - cd ..
  - git clone -b $TRAVIS_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
  - cd boost-root
  - git submodule update -q --init libs/headers
  - git submodule update -q --init tools/boost_install
  - git submodule update -q --init tools/boostdep
  - git submodule update -q --init tools/build
  - mkdir -p libs/$SELF
  - cp -r $TRAVIS_BUILD_DIR/* libs/$SELF
  - export BOOST_ROOT="`pwd`"
  - export PATH="`pwd`":$PATH
  - echo "$SELF"
  - echo "$BOOST_ROOT"
  - echo "$PATH"
  - python tools/boostdep/depinst/depinst.py $SELF
  - ./bootstrap.sh
  - ./b2 headers

addons:
  apt:
    packages:
      - binutils-gold
      - gdb
      - libc6-dbg

branches:
  only:
    - develop
    - master

script:
  - cd $BOOST_ROOT/libs/$SELF
  - ci/travis/build.sh

#
# Default toolsets in Ubuntu
#
#       trusty trusty bionic
#        14.04  16.04  18.04
#       ------ ------ ------
# clang    3.4    3.8    6.0
#   gcc  4.8.2  5.3.1  7.3.0
#

anchors:
  clang-38: &clang-38 { apt: { packages: [ "clang-3.8",
                                           "libstdc++-6-dev" ], sources: [ "llvm-toolchain-trusty-3.8",
                                                                           "ubuntu-toolchain-r-test"   ] } }
  clang-4:  &clang-4  { apt: { packages: [ "clang-4.0",
                                           "libstdc++-6-dev" ], sources: [ "llvm-toolchain-trusty-4.0",
                                                                           "ubuntu-toolchain-r-test"   ] } }
  clang-5:  &clang-5  { apt: { packages: [ "clang-5.0",
                                           "libstdc++-7-dev" ], sources: [ "llvm-toolchain-trusty-5.0",
                                                                           "ubuntu-toolchain-r-test"   ] } }
  clang-6:  &clang-6  { apt: { packages: [ "clang-6.0",
                                           "libc++-dev",
                                           "libstdc++-8-dev" ], sources: [ "llvm-toolchain-trusty-6.0",
                                                                           "ubuntu-toolchain-r-test"   ] } }
  gcc-5:    &gcc-5    { apt: { packages: [ "g++-5"           ], sources: [ "ubuntu-toolchain-r-test"   ] } }
  gcc-6:    &gcc-6    { apt: { packages: [ "g++-6"           ], sources: [ "ubuntu-toolchain-r-test"   ] } }
  gcc-7:    &gcc-7    { apt: { packages: [ "g++-7"           ], sources: [ "ubuntu-toolchain-r-test"   ] } }
  gcc-8:    &gcc-8    { apt: { packages: [ "g++-8"           ], sources: [ "ubuntu-toolchain-r-test"   ] } }

jobs:
  allow_failures:
    - env:
        - COPY="all the environment settings from your job"

  include:
    # libstdc++
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-5",     "CC=gcc-5", "CXX=g++-5", "COMPILER=g++-5", "CXXSTD=11", "COV_TOOL=gcov-5"                       ], addons: *gcc-5    }
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-6",     "CC=gcc-6", "CXX=g++-6", "COMPILER=g++-6", "CXXSTD=11", "COV_TOOL=gcov-6"                                         ], addons: *gcc-6    }
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-6",     "CC=gcc-6", "CXX=g++-6", "COMPILER=g++-6", "CXXSTD=14", "COV_TOOL=gcov-6"                                          ], addons: *gcc-6    }
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-7",     "CC=gcc-7", "CXX=g++-7", "COMPILER=g++-7", "CXXSTD=11", "COV_TOOL=gcov-7"                                          ], addons: *gcc-7    }
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-7",     "CC=gcc-7", "CXX=g++-7", "COMPILER=g++-7", "CXXSTD=14", "COV_TOOL=gcov-7"                                          ], addons: *gcc-7    }
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-7",     "CC=gcc-7", "CXX=g++-7", "COMPILER=g++-7", "CXXSTD=17", "COV_TOOL=gcov-7"                                          ], addons: *gcc-7    }
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-8",     "CC=gcc-8", "CXX=g++-8", "COMPILER=g++-8", "CXXSTD=11", "COV_TOOL=gcov-8"                                          ], addons: *gcc-8    }
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-8",     "CC=gcc-8", "CXX=g++-8", "COMPILER=g++-8", "CXXSTD=14", "COV_TOOL=gcov-8"                                          ], addons: *gcc-8    }
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-8",     "CC=gcc-8", "CXX=g++-8", "COMPILER=g++-8", "CXXSTD=17", "COV_TOOL=gcov-8"                                          ], addons: *gcc-8    }
    - { os: "linux", compiler: "gcc",   env: [ "TOOLSET=gcc-8",     "CC=gcc-8", "CXX=g++-8", "COMPILER=g++-8", "CXXSTD=2a", "COV_TOOL=gcov-8"                                          ], addons: *gcc-8    }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-3.8", "CC=clang-3.8", "CXX=clang++-3.8" , "COMPILER=clang++-3.8", "CXXSTD=11", "COV_TOOL=llvm-cov"                           ], addons: *clang-38 }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-3.8", "CC=clang-3.8", "CXX=clang++-3.8" , "COMPILER=clang++-3.8", "CXXSTD=14", "COV_TOOL=llvm-cov"                           ], addons: *clang-38 }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-4.0", "CC=clang-4.0", "CXX=clang++-4.0" , "COMPILER=clang++-4.0", "CXXSTD=11", "COV_TOOL=llvm-cov"                           ], addons: *clang-4  }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-4.0", "CC=clang-4.0", "CXX=clang++-4.0" , "COMPILER=clang++-4.0", "CXXSTD=14", "COV_TOOL=llvm-cov"                           ], addons: *clang-4  }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-5.0", "CC=clang-5.0", "CXX=clang++-5.0" , "COMPILER=clang++-5.0", "CXXSTD=11", "COV_TOOL=llvm-cov"                           ], addons: *clang-5  }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-5.0", "CC=clang-5.0", "CXX=clang++-5.0" , "COMPILER=clang++-5.0", "CXXSTD=14", "COV_TOOL=llvm-cov"                           ], addons: *clang-5  }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-5.0", "CC=clang-5.0", "CXX=clang++-5.0" , "COMPILER=clang++-5.0", "CXXSTD=17", "COV_TOOL=llvm-cov"                           ], addons: *clang-5  }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-6.0", "CC=clang-6.0", "CXX=clang++-6.0" , "COMPILER=clang++-6.0", "CXXSTD=11", "COV_TOOL=llvm-cov"                           ], addons: *clang-6  }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-6.0", "CC=clang-6.0", "CXX=clang++-6.0" , "COMPILER=clang++-6.0", "CXXSTD=14", "COV_TOOL=llvm-cov"                           ], addons: *clang-6  }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-6.0", "CC=clang-6.0", "CXX=clang++-6.0" , "COMPILER=clang++-6.0", "CXXSTD=17", "COV_TOOL=llvm-cov"                           ], addons: *clang-6  }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-6.0", "CC=clang-6.0", "CXX=clang++-6.0" , "COMPILER=clang++-6.0", "CXXSTD=2a", "COV_TOOL=llvm-cov"                           ], addons: *clang-6  }

    # libc++
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-6.0", "CC=clang-6.0", "CXX=clang++-6.0", "COMPILER=clang++-6.0", "CXXSTD=11", "COV_TOOL=llvm-cov", "CXXFLAGS=-stdlib=libc++" ], addons: *clang-6   }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-6.0", "CC=clang-6.0", "CXX=clang++-6.0", "COMPILER=clang++-6.0", "CXXSTD=14", "COV_TOOL=llvm-cov", "CXXFLAGS=-stdlib=libc++" ], addons: *clang-6   }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-6.0", "CC=clang-6.0", "CXX=clang++-6.0", "COMPILER=clang++-6.0", "CXXSTD=17", "COV_TOOL=llvm-cov", "CXXFLAGS=-stdlib=libc++" ], addons: *clang-6   }
    - { os: "linux", compiler: "clang", env: [ "TOOLSET=clang-6.0", "CC=clang-6.0", "CXX=clang++-6.0", "COMPILER=clang++-6.0", "CXXSTD=2a", "COV_TOOL=llvm-cov", "CXXFLAGS=-stdlib=libc++" ], addons: *clang-6   }

    # osx
    - { os: "osx", env: [ "TOOLSET=clang", "COMPILER=clang++", "CXXSTD=11" ], osx_image: "xcode9.3" }
    - { os: "osx", env: [ "TOOLSET=clang", "COMPILER=clang++", "CXXSTD=14" ], osx_image: "xcode9.3" }
    - { os: "osx", env: [ "TOOLSET=clang", "COMPILER=clang++", "CXXSTD=17" ], osx_image: "xcode9.3" }

    - os: linux
      env:
        - COMMENT=cppcheck
        - CXXSTD=17
      script:
        - cd $BOOST_ROOT/libs/$SELF
        - ci/travis/cppcheck.sh

    - os: linux
      env:
        - COMMENT=ubsan
        - B2_VARIANT=variant=debug
        - TOOLSET=gcc-8
        - CXXSTD=11,14,17,2a
        - CXXFLAGS="cxxflags=-fno-omit-frame-pointer cxxflags=-fsanitize=undefined cxxflags=-fno-sanitize-recover=undefined"
        - LINKFLAGS="linkflags=-fsanitize=undefined linkflags=-fno-sanitize-recover=undefined linkflags=-fuse-ld=gold"
        - UBSAN_OPTIONS=print_stacktrace=1
      addons: *gcc-8

    - os: linux
      env:
        - COMMENT=valgrind
        - TOOLSET=clang-6.0
        - CXXSTD=11,14,17,2a
        - B2_VARIANT=variant=debug
        - TESTFLAGS=testing.launcher=valgrind
        - VALGRIND_OPTS=--error-exitcode=1
      addons: *clang-6
      script:
        - cd $BOOST_ROOT/libs/$SELF
        - ci/travis/valgrind.sh

    #################### Jobs to run on pushes to master, develop ###################

    # Coverity Scan
    #- os: linux
    #  if: (env(COVERITY_SCAN_NOTIFICATION_EMAIL) IS present) AND (branch IN (develop, master)) AND (type IN (cron, push))
    #  env:
    #    - COMMENT="Coverity Scan"
    #    - TOOLSET=gcc-7
    #    - B2_VARIANT=variant=debug
    #    - CXXSTD=11,14,17,2a
    #  addons: *gcc-7
    #  script:
    #    - cd $BOOST_ROOT/libs/$SELF
    #    - ci/travis/coverity.sh

after_success:
  - cd $BOOST_ROOT/libs/$SELF
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then if pyenv shell 3.6.3; then pip3 install --user codecov; fi; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then if $COMPILER test/test_autodiff1.cpp -std=c++$CXXSTD -I$BOOST_ROOT -Iinclude -Wall -O0 --coverage -o ./test_autodiff1; then ./test_autodiff1; fi; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then if $COMPILER test/test_autodiff2.cpp -std=c++$CXXSTD -I$BOOST_ROOT -Iinclude -Wall -O0 --coverage -o ./test_autodiff2; then ./test_autodiff2; fi; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then if $COMPILER test/test_autodiff3.cpp -std=c++$CXXSTD -I$BOOST_ROOT -Iinclude -Wall -O0 --coverage -o ./test_autodiff3; then ./test_autodiff3; fi; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then if $COMPILER test/test_autodiff4.cpp -std=c++$CXXSTD -I$BOOST_ROOT -Iinclude -Wall -O0 --coverage -o ./test_autodiff4; then ./test_autodiff4; fi; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then if $COMPILER test/test_autodiff5.cpp -std=c++$CXXSTD -I$BOOST_ROOT -Iinclude -Wall -O0 --coverage -o ./test_autodiff5; then ./test_autodiff5; fi; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then if $COMPILER test/test_autodiff6.cpp -std=c++$CXXSTD -I$BOOST_ROOT -Iinclude -Wall -O0 --coverage -o ./test_autodiff6; then ./test_autodiff6; fi; fi
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then bash <(curl -s https://codecov.io/bash) -X coveragepy -x $COV_TOOL -a --relative-only; fi

notifications:
  email:
    false
